plugins {
	id 'maven-publish'
	id 'com.github.hierynomus.license' version '0.16.1' apply false
	id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false

	// https://github.com/ReplayMod/preprocessor
	// https://github.com/Fallen-Breath/preprocessor
	id 'com.replaymod.preprocess' version '0a04a5668b'

	// https://github.com/Fallen-Breath/yamlang
	id 'me.fallenbreath.yamlang' version '1.4.1' apply false
}

preprocess {
    strictExtraMappings = false

	def mc1192_fabric = createNode('1.19.2-fabric', 1_19_02, '')
	def mc1194_fabric = createNode('1.19.4-fabric', 1_19_04, '')
	def mc1204_fabric = createNode('1.20.4-fabric', 1_20_04, '')
    def mc1206_fabric = createNode('1.20.6-fabric', 1_20_06, '')
    def mc1215_fabric = createNode('1.21.5-fabric', 1_21_05, '')
    def mc1216_fabric = createNode('1.21.6-fabric', 1_21_06, '')

	def mc1192_forge = createNode('1.19.2-forge', 1_19_02, '')
	def mc1194_forge = createNode('1.19.4-forge', 1_19_04, '')
	def mc1204_forge = createNode('1.20.4-forge', 1_20_04, '')
    def mc1206_forge = createNode('1.20.6-forge', 1_20_06, '')
    def mc1215_forge = createNode('1.21.5-forge', 1_21_05, '')
    def mc1216_forge = createNode('1.21.6-forge', 1_21_06, '')

    def mc1206_neoforge = createNode('1.20.6-neoforge', 1_20_06, '')
    def mc1215_neoforge = createNode('1.21.5-neoforge', 1_21_05, '')
    def mc1216_neoforge = createNode('1.21.6-neoforge', 1_21_06, '')

	mc1192_fabric.link(mc1194_fabric, null)
	mc1194_fabric.link(mc1204_fabric, null)
    mc1204_fabric.link(mc1206_fabric, null)
    mc1206_fabric.link(mc1215_fabric, null)
    mc1215_fabric.link(mc1216_fabric, null)

	mc1192_fabric.link(mc1192_forge, null)
	mc1194_fabric.link(mc1194_forge, null)
	mc1204_fabric.link(mc1204_forge, null)
    mc1206_fabric.link(mc1206_forge, null)
    mc1215_fabric.link(mc1215_forge, null)
    mc1216_fabric.link(mc1216_forge, null)

    mc1206_fabric.link(mc1206_neoforge, null)
    mc1215_fabric.link(mc1215_neoforge, null)
    mc1216_fabric.link(mc1216_neoforge, null)
}

tasks.register('buildAndGather') {
	subprojects {
		dependsOn project.tasks.named('build').get()
	}
	doFirst {
		println 'Gathering builds'
		def buildLibs = {
			p -> p.buildDir.toPath().resolve('libs')
		}
		delete fileTree(buildLibs(rootProject)) {
			include '*'
		}
		subprojects {
			copy {
				from(buildLibs(project)) {
					include '*.jar'
					exclude '*-dev.jar', '*-sources.jar', '*-shadow.jar'
				}
				into buildLibs(rootProject)
				duplicatesStrategy = DuplicatesStrategy.INCLUDE
			}
		}
	}
}
